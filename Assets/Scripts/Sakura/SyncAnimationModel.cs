using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;
using Normal.Realtime;

[RealtimeModel]
public partial class SyncAnimationModel
{
    [RealtimeProperty(1, false, true)]    
    bool _walk;                           
    [RealtimeProperty(2, false, true)]
    bool _attack;
    [RealtimeProperty(3, false, true)]
    bool _fall;
}


/* ----- Begin Normal Autogenerated Code ----- */
public partial class SyncAnimationModel : RealtimeModel {
    public bool walk {
        get {
            return _walkProperty.value;
        }
        set {
            if (_walkProperty.value == value) return;
            _walkProperty.value = value;
            InvalidateUnreliableLength();
            FireWalkDidChange(value);
        }
    }
    
    public bool attack {
        get {
            return _attackProperty.value;
        }
        set {
            if (_attackProperty.value == value) return;
            _attackProperty.value = value;
            InvalidateUnreliableLength();
            FireAttackDidChange(value);
        }
    }
    
    public bool fall {
        get {
            return _fallProperty.value;
        }
        set {
            if (_fallProperty.value == value) return;
            _fallProperty.value = value;
            InvalidateUnreliableLength();
            FireFallDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(SyncAnimationModel model, T value);
    public event PropertyChangedHandler<bool> walkDidChange;
    public event PropertyChangedHandler<bool> attackDidChange;
    public event PropertyChangedHandler<bool> fallDidChange;
    
    public enum PropertyID : uint {
        Walk = 1,
        Attack = 2,
        Fall = 3,
    }
    
    #region Properties
    
    private UnreliableProperty<bool> _walkProperty;
    
    private UnreliableProperty<bool> _attackProperty;
    
    private UnreliableProperty<bool> _fallProperty;
    
    #endregion
    
    public SyncAnimationModel() : base(null) {
        _walkProperty = new UnreliableProperty<bool>(1, _walk);
        _attackProperty = new UnreliableProperty<bool>(2, _attack);
        _fallProperty = new UnreliableProperty<bool>(3, _fall);
    }
    
    private void FireWalkDidChange(bool value) {
        try {
            walkDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireAttackDidChange(bool value) {
        try {
            attackDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireFallDidChange(bool value) {
        try {
            fallDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _walkProperty.WriteLength(context);
        length += _attackProperty.WriteLength(context);
        length += _fallProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _walkProperty.Write(stream, context);
        writes |= _attackProperty.Write(stream, context);
        writes |= _fallProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.Walk: {
                    changed = _walkProperty.Read(stream, context);
                    if (changed) FireWalkDidChange(walk);
                    break;
                }
                case (uint) PropertyID.Attack: {
                    changed = _attackProperty.Read(stream, context);
                    if (changed) FireAttackDidChange(attack);
                    break;
                }
                case (uint) PropertyID.Fall: {
                    changed = _fallProperty.Read(stream, context);
                    if (changed) FireFallDidChange(fall);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _walk = walk;
        _attack = attack;
        _fall = fall;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
